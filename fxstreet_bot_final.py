import asyncio
import cloudscraper
from bs4 import BeautifulSoup
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "8374044886:AAHaI_LNKeW90A5sOYA_uzs5nfxVWBoM2us"
TELEGRAM_CHAT_ID = "-1002518445518"
MESSAGE_THREAD_ID = 15998
CHECK_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
last_sent_link = None

# === –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô ===
def get_latest_news():
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π...", flush=True)

    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get("https://www.fxstreet.ru.com/news", timeout=10)

        if "Just a moment" in response.text or "Enable JavaScript" in response.text:
            print("‚ö†Ô∏è Cloudflare –≤—Å—ë –µ—â—ë –±–ª–æ–∫–∏—Ä—É–µ—Ç", flush=True)
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        news_items = soup.select("div.news-feed__item a")

        print(f"üîé –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(news_items)}", flush=True)

        for el in news_items:
            href = el.get("href")
            title = el.get_text(strip=True)

            if not href or not title:
                continue

            full_url = "https://www.fxstreet.ru.com" + href
            print(f"‚úÖ –ù–æ–≤–æ—Å—Ç—å: {title} ‚Üí {full_url}", flush=True)
            return title, full_url  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–æ–≤–æ—Å—Ç—å

        print("‚ùó –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", flush=True)
        return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", e, flush=True)
        return None

# === –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ===
async def send_news():
    global last_sent_link

    news = get_latest_news()
    if not news:
        return

    title, link = news

    if link == last_sent_link:
        print("‚è≥ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç", flush=True)
        return

    message = f"üì∞ <b>{title}</b>\n{link}"
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {title}", flush=True)
        last_sent_link = link
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e, flush=True)

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
async def main():
    print("üöÄ FXStreet –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", flush=True)
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ FXStreet –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.",
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:", e, flush=True)

    while True:
        await send_news()
        await asyncio.sleep(CHECK_INTERVAL)

# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"FXStreet Bot is running.")

def run_http_server():
    server = HTTPServer(("0.0.0.0", 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000", flush=True)
    server.serve_forever()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e, flush=True)
