import cloudscraper
from bs4 import BeautifulSoup
import asyncio
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "8374044886:AAHaI_LNKeW90A5sOYA_uzs5nfxVWBoM2us"
TELEGRAM_CHAT_ID = "-1002518445518"
MESSAGE_THREAD_ID = 15998
CHECK_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ ===
last_link = None
first_run = True

# === –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–°–¢–ï–ô ===
def get_news():
    url = "https://www.fxstreet.ru.com/news"
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        scraper = cloudscraper.create_scraper()
        resp = scraper.get(url, headers=headers, timeout=10)

        print("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", resp.status_code)

        if "Just a moment" in resp.text or "Enable JavaScript" in resp.text:
            print("‚ùå Cloudflare –≤—Å—ë –µ—â—ë –±–ª–æ–∫–∏—Ä—É–µ—Ç!")
            return []

        soup = BeautifulSoup(resp.text, "html.parser")
        all_links = soup.find_all("a", href=True)

        news = []
        for el in all_links:
            href = el["href"]
            title = el.get_text(strip=True)

            if not href.startswith("/news/"):
                continue

            link = "https://www.fxstreet.ru.com" + href
            news.append((title, link))

        print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")
        for title, link in news:
            print("üîó", title, "=>", link)

        return news

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", e)
        return []

# === –û–¢–ü–†–ê–í–ö–ê –ù–û–í–û–°–¢–ï–ô ===
async def send_news(news_list):
    global last_link, first_run

    news_list = list(reversed(news_list))  # –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º

    for title, link in news_list:
        if link == last_link:
            continue  # —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

        msg = f"üì∞ <b>{title}</b>\n{link}"
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏:", title)

        try:
            await bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=msg,
                parse_mode="HTML",
                message_thread_id=MESSAGE_THREAD_ID
            )
            last_link = link
            await asyncio.sleep(1)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)

        if first_run:
            break  # –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É

    first_run = False

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
async def main():
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ FXStreet –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.",
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", e)

    while True:
        try:
            news = get_news()
            if news:
                await send_news(news)
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:", e)
            await asyncio.sleep(30)

# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    server.serve_forever()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    asyncio.run(main())
