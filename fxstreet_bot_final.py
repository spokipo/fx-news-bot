import os
import asyncio
import cloudscraper
from bs4 import BeautifulSoup
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò –∏–∑ .env ===
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
MESSAGE_THREAD_ID = int(os.getenv("MESSAGE_THREAD_ID", 0))
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", 60))

bot = Bot(token=TELEGRAM_BOT_TOKEN)
last_link = None
first_run = True

# === –°–ë–û–† –ù–û–í–û–°–¢–ï–ô ===
def get_latest_news():
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π...", flush=True)

    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get("https://www.fxstreet.ru.com/news", timeout=10)

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}", flush=True)
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        news_tags = soup.select("div.fxs_latestNews .fxs_headline_medium a")

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_tags)}", flush=True)

        for tag in news_tags:
            href = tag.get("href")
            title = tag.get_text(strip=True)

            if not href or not title:
                continue

            if "/news/" not in href:
                continue

            link = href if href.startswith("http") else "https://www.fxstreet.ru.com" + href
            print(f"üÜï –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title} | {link}", flush=True)
            return {"title": title, "url": link}

        print("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", flush=True)
        return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ get_latest_news():", e, flush=True)
        return None

# === –û–¢–ü–†–ê–í–ö–ê –í –¢–ï–õ–ï–ì–†–ê–ú ===
async def send_news(news):
    global last_link, first_run

    if not news:
        return

    if news["url"] == last_link:
        print("üîÅ –ù–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", flush=True)
        return

    msg = f"üì∞ <b>{news['title']}</b>\n{news['url']}"

    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=msg,
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
        print("‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", flush=True)
        last_link = news["url"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e, flush=True)

    if first_run:
        first_run = False

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
async def main():
    global first_run

    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –ª–µ–Ω—Ç–æ–π FXStreet",
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", e, flush=True)

    while True:
        try:
            news = get_latest_news()
            await send_news(news)
            await asyncio.sleep(CHECK_INTERVAL)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:", e, flush=True)
            await asyncio.sleep(30)

# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000", flush=True)
    server.serve_forever()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    asyncio.run(main())
