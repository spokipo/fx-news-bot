import asyncio
import cloudscraper
from bs4 import BeautifulSoup
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("CHAT_ID")
MESSAGE_THREAD_ID = int(os.getenv("MESSAGE_THREAD_ID", "0"))
CHECK_INTERVAL = 60  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

bot = Bot(token=TELEGRAM_BOT_TOKEN)
last_sent_link = None

# === –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ô –ù–û–í–û–°–¢–ò ===
def get_latest_news():
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π...", flush=True)

    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get("https://www.fxstreet.ru.com/news", timeout=10)

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}", flush=True)
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        news_blocks = soup.select("div.editorialhighlight_medium")

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤: {len(news_blocks)}", flush=True)

        for block in news_blocks:
            link_tag = block.find("a", href=True)
            title_tag = block.find("h3")

            if link_tag and title_tag:
                href = link_tag['href']
                title = title_tag.get_text(strip=True)
                full_link = href if href.startswith("http") else f"https://www.fxstreet.ru.com{href}"

                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title} ‚Üí {full_link}", flush=True)
                return {"title": title, "url": full_link}

        print("‚ùó –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", flush=True)
        return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", e, flush=True)
        return None

# === –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ===
async def send_news():
    global last_sent_link

    news = get_latest_news()
    if not news:
        return

    if news["url"] == last_sent_link:
        print("‚è≥ –ù–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç", flush=True)
        return

    text = f"üì∞ <b>{news['title']}</b>\n{news['url']}"
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=text,
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
        print(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {news['title']}", flush=True)
        last_sent_link = news["url"]
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", e, flush=True)

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
async def main():
    print("üöÄ FXStreet –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", flush=True)
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ FXStreet –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.",
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:", e, flush=True)

    while True:
        await send_news()
        await asyncio.sleep(CHECK_INTERVAL)

# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"FXStreet Bot is running.")

def run_http_server():
    server = HTTPServer(("0.0.0.0", 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000", flush=True)
    server.serve_forever()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e, flush=True)
