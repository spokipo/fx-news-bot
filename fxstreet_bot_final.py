import cloudscraper
from bs4 import BeautifulSoup
import asyncio
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = "8374044886:AAHaI_LNKeW90A5sOYA_uzs5nfxVWBoM2us"
TELEGRAM_CHAT_ID = "-1002518445518"
CHECK_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# === –ü–ê–†–°–ò–ù–ì –ù–û–í–û–°–¢–ï–ô ===
def get_news():
    print("üì° –í—ã–∑–æ–≤ get_news()")

    url = "https://www.fxstreet.ru.com/news"
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        scraper = cloudscraper.create_scraper()
        resp = scraper.get(url, headers=headers, timeout=10)

        print("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", resp.status_code)

        if "Just a moment" in resp.text or "Enable JavaScript" in resp.text:
            print("‚ùå Cloudflare –≤—Å—ë –µ—â—ë –±–ª–æ–∫–∏—Ä—É–µ—Ç!")
            return []

        soup = BeautifulSoup(resp.text, "html.parser")
        all_links = soup.find_all("a", href=True)

        news = []
        for el in all_links:
            href = el["href"]
            title = el.get_text(strip=True)

            if not href.startswith("/news/"):
                continue

            full_link = "https://www.fxstreet.ru.com" + href
            news.append((title, full_link))

        print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")
        for t, l in news:
            print("üîó", t, "=>", l)

        return news

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", e)
        return []

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ (–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π) ===
async def main():
    print("‚úÖ main() –∑–∞–ø—É—â–µ–Ω")

    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ FXStreet –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç –æ—Ç–ª–∞–¥–∫—É",
            parse_mode="HTML"
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", e)

    print("üì° –í—ã–∑—ã–≤–∞–µ–º get_news()...")
    news = get_news()
    print("üì¶ –ü–æ–ª—É—á–µ–Ω–æ:", len(news), "–Ω–æ–≤–æ—Å—Ç–µ–π")

    for title, link in news:
        print("üîó", title, "=>", link)

    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=f"üß™ –ù–∞–π–¥–µ–Ω–æ <b>{len(news)}</b> –Ω–æ–≤–æ—Å—Ç–µ–π.",
            parse_mode="HTML"
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", e)

    await asyncio.sleep(3600)  # –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º

# === HTTP-–°–ï–†–í–ï–† –î–õ–Ø RENDER ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    server.serve_forever()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    try:
        asyncio.run(main())
    except Exception as e:
        print("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:", e)