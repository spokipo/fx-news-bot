import os
import asyncio
import cloudscraper
from bs4 import BeautifulSoup
from telegram import Bot
from http.server import BaseHTTPRequestHandler, HTTPServer
import threading

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("CHAT_ID")
MESSAGE_THREAD_ID = int(os.getenv("MESSAGE_THREAD_ID", "0"))
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥

bot = Bot(token=TELEGRAM_BOT_TOKEN)

# === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ ===
last_sent_link = None
first_run = True


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏ ===
def get_latest_news():
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π...", flush=True)

    try:
        scraper = cloudscraper.create_scraper()
        response = scraper.get("https://www.fxstreet.ru.com/news", timeout=10)

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {response.status_code}", flush=True)
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        news_blocks = soup.select("div.news-feed__item a[href]")

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_blocks)}", flush=True)

        for link_tag in news_blocks:
            title = link_tag.get_text(strip=True)
            href = link_tag['href']

            if not title or not href:
                continue

            if "/news/" not in href:
                continue  # –æ—Ç—Å–µ–∫–∞–µ–º –ª–∏—à–Ω–µ–µ

            full_link = href if href.startswith("http") else f"https://www.fxstreet.ru.com{href}"
            print(f"‚úÖ –°–≤–µ–∂–∞—è –Ω–æ–≤–æ—Å—Ç—å: {title} ‚Üí {full_link}", flush=True)

            return {"title": title, "url": full_link}

        print("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π", flush=True)
        return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ get_latest_news():", e, flush=True)
        return None


# === –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram ===
async def send_news(title, url):
    global last_sent_link

    if url == last_sent_link:
        print("üîÅ –≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", flush=True)
        return

    message = f"üì∞ <b>{title}</b>\n{url}"
    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=message,
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
        print("üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram", flush=True)
        last_sent_link = url
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", e, flush=True)


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main():
    global first_run

    try:
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ FXStreet",
            parse_mode="HTML",
            message_thread_id=MESSAGE_THREAD_ID
        )
    except Exception as e:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e, flush=True)

    while True:
        news = get_latest_news()

        if news:
            title, url = news["title"], news["url"]
            await send_news(title, url)

            if first_run:
                first_run = False

        else:
            print("‚è≥ –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å", flush=True)

        await asyncio.sleep(CHECK_INTERVAL)


# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ping ===
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()


def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000", flush=True)
    server.serve_forever()


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    threading.Thread(target=run_http_server).start()
    asyncio.run(main())
